#!/usr/bin/env node
'use strict';
global.__started_at = new Date;

let glob = require('glob');
let path = require('path');
let petrol = {};

let yargs = require('yargs');
let version = require('../package.json').version;

yargs
    .usage(`Usage:\n  $0 <cmd> [args]`)
    .option('version', {
        alias: 'V',
        type: 'boolean',
        describe: 'Show version number',
    })
    .option('stop-on-failure', {
        alias: 'f',
        type: 'boolean',
        describe: 'Stop execution upon first error or failure.'
    })
    .option('help', {
        alias: 'h',
        type: 'boolean',
        describe: 'Show help'
    })
    .option('verbose', {
        alias: ['v', 'vv', 'vvv'],
        type: 'count',
        describe: 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'
    })
    .command('run [path]', 'Run the tests', {}, function (argv) {
        let testsLocation = '**/*Test.js';

        if (argv.path) {
            testsLocation = argv.path.endsWith('/') ? `${argv.path}**/*Test.js` : argv.path;
        }

        new Promise((resolve, reject) => {
            petrol.filter = testsLocation.split(':')[1];

            glob(testsLocation.split(':')[0], {absolute: true}, (errors, files) => {
                if (errors) {
                    return reject(errors);
                }

                return resolve(files);
            });
        }).then((files) => {
            console.log(`Petrol Javascript Testing Framework\n`);
            console.log(`Preparing files...`);

            require('jsdom-global')();

            petrol.files = files;
            petrol.stopOnFailure = program['stop-on-failure'];
            petrol.verbose = program['verbose'];
            global.petrol = petrol;

            require('source-map-support').install({
                environment: 'node',
                handleUncaughtExceptions: false,
                hookRequire: true
            });

            const moduleAlias = require('module-alias');
            const hooks = require('require-extension-hooks');

            moduleAlias.addAlias('vue', 'vue/dist/vue.min');
            hooks('vue').plugin('vue').push();
            hooks(['vue', 'js']).plugin(path.resolve(__dirname, '../libs/require-extension-hooks-babel.js')).push();

            var Jasmine = require('jasmine');
            var jasmine = new Jasmine();

            jasmine.env.clearReporters();
            jasmine.addReporter(require('../console-reporter.js'));
            jasmine.execute([path.resolve(__dirname, '../start.js')]);
            jasmine.stopSpecOnExpectationFailure(true);

        }).catch((failures) => {
            console.log(failures);
        })

    })
    .command('make:test [name]', 'Create a test', (yargs) => {
        yargs.option('for', {
          describe: 'Create a testcase for a specific framework. The default is a framework agnostic TestCase',
          default: 'default',
          choices: ['default', 'vue']
        })
    }, function (argv) {
        let commandName = argv.for == 'default' ? 'test' : argv.for;
        let command = new require(`../commands/make-${commandName}.js`);

        command.run(argv.name);
    })
    .version()
    .help()
    .strict();

yargs.getOptions().boolean = [];
yargs.getOptions().count = [];

let program = yargs.argv;

if (program.version) {
    console.log(version);
}

if (process.argv.length <= 2 || program.help) {
    yargs.showHelp();
}

